{"version":3,"sources":["components/temperatures.js","components/Message.js","App.js","serviceWorker.js","index.js"],"names":["Temperatures","props","tempBlock","styled","div","forecastBlock","wicon","i","tempDiv","dayDate","getDayName","dayNum","day","getCond","condition","icon","temps","this","map","tempObj","className","length","key","time","getTime","getDay","getMonth","getDate","temp","cond","style","height","textTransform","city","React","Component","Message","messageSpan","span","messageText","App","weatherMainDiv","weatherHeader","header","weatherForm","form","weatherSearchBar","input","weatherSearchBtn","button","tempSection","section","InnerScreen","InnerScreenText","changeHandler","event","setState","cityName","target","value","submitHandler","preventDefault","state","showLoading","fetch","then","response","console","log","json","data","weatherSort","catch","err","showError","cod","count","cnt","tz","timezone","timeTemp","Date","list","dt","Math","round","main","weather","toLowerCase","push","result","filter","tt","getHours","highs","j","resultDay","highestVal","Number","NEGATIVE_INFINITY","highestObj","tmp","k","showTemps","bind","onSubmit","type","name","onChange","placeholder","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08c7e679.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nclass Temperatures extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    \r\n    tempBlock = styled.div`\r\n        height: 300px;\r\n        color: #1d1d1d;\r\n        background-color: #eaeaea;\r\n        border: 1px solid #888888;\r\n        box-sizing: border-box;\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n        \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n        sans-serif;\r\n    `\r\n\r\n    forecastBlock = styled.div`\r\n       margin: 0 10px;\r\n    `\r\n\r\n    wicon = styled.i`\r\n        color: #0d0d0d;\r\n        font-size: 70px;\r\n        margin-top: 50px;\r\n    `\r\n\r\n    tempDiv = styled.div`\r\n        font-size:40px;\r\n        top: 90px;\r\n    `\r\n\r\n    dayDate = styled.div`\r\n        width: auto;\r\n        margin-top: 20px;\r\n    `\r\n\r\n    getDayName = (dayNum) => {\r\n        let day = \"\"\r\n        switch (dayNum) {\r\n            case (0):\r\n                day = \"Sunday\"\r\n                break\r\n            case (1):\r\n                day = \"Monday\"\r\n                break\r\n            case (2):\r\n                day = \"Tuesday\"\r\n                break\r\n            case (3):\r\n                day = \"Wednesday\"\r\n                break\r\n            case (4):\r\n                day = \"Thursday\"\r\n                break\r\n            case (5):\r\n                day = \"Friday\"\r\n                break\r\n            default:\r\n                day = \"Saturday\"\r\n        }\r\n        return day;\r\n    }\r\n\r\n    getCond = (condition) => {\r\n        let icon = \"\"\r\n        switch (condition) {\r\n            case \"clear\":\r\n                icon = \"wi-wu-clear\"\r\n                break\r\n            case \"snow\":\r\n                icon = \"wi-snow\"\r\n                break\r\n            case \"clouds\":\r\n                icon = \"wi-cloudy\"\r\n                break\r\n            case \"rain\":\r\n                icon = \"wi-rain\"\r\n                break\r\n            default:\r\n                icon = \"wi-wu-unknown\"\r\n        }\r\n        return icon;\r\n    }\r\n\r\n    render () {\r\n        const temps = this.props.temps.map((tempObj => {\r\n            return(\r\n                <this.tempBlock className={`pure-u-1-${this.props.temps.length}`} key={tempObj.time.getTime()}>\r\n                    <this.dayDate>{this.getDayName(tempObj.time.getDay())}<br/>\r\n                    {tempObj.time.getMonth() + 1}/{tempObj.time.getDate()}</this.dayDate>\r\n                    <this.tempDiv>{tempObj.temp}</this.tempDiv>\r\n                    <this.wicon className={`wi ${this.getCond(tempObj.cond)}`}></this.wicon>\r\n                </this.tempBlock>\r\n            )\r\n        }))\r\n        return (\r\n            <this.forecastBlock>\r\n                <div className=\"pure-g\" style={{height: \"40px\"}}>\r\n                    <div className=\"pure-u-1-1\">{this.props.temps.length}-day forecast for <span style={{textTransform: \"capitalize\"}}>{this.props.city}</span></div>\r\n                </div>\r\n                <div className=\"pure-g\">\r\n                    {temps}\r\n                </div>\r\n            </this.forecastBlock>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Temperatures","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nclass Message extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    messageSpan = styled.span`\r\n        text-shadow: 2px 2px 2px dark-grey;\r\n        font-size: 18px;\r\n    `\r\n\r\n    render () {\r\n        return (\r\n            <this.messageSpan>{this.props.messageText}</this.messageSpan>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message","import React, {Component} from 'react'\nimport styled from 'styled-components'\nimport Temperatures from './components/temperatures'\nimport Message from \"./components/Message\"\n\nclass App extends Component {\n\n  constructor () {\n    super();\n    this.state = {\n      cityName: '',\n      showLoading: false,\n      showTemps: false,\n      showError: false,\n      temps: null\n    }\n    this.changeHandler = this.changeHandler.bind(this)\n    this.submitHandler = this.submitHandler.bind(this)\n    this.weatherSort = this.weatherSort.bind(this)\n  }\n\n  weatherMainDiv = styled.div`\n    margin: 30px auto;\n    padding: 10px;\n    background-color: #adadad;\n    width: 600px;\n    float: none;\n  `\n  weatherHeader = styled.header`\n    width: auto;\n    background-color: #444478;\n    border: 1px solid white;\n    margin-bottom: 20px;\n  `\n  weatherForm = styled.form`\n    width: 100%;\n    text-align:center;\n    margin: auto;\n    padding 10px 0;\n  `\n  weatherSearchBar = styled.input`\n    width: 400px;\n    border: 2px solid #000078;\n    border-right: none;\n    font-size: 12px;\n    padding: 5px;\n    height: 18px;\n    border-radius: 3px 0 0 3px;\n    outline: none;\n    color: #000078;\n    margin: auto;\n  `\n  weatherSearchBtn = styled.button`\n    width: 95px;\n    height: 32px;\n    padding: 5px;\n    border: 2px solid #000078;\n    border-left: none\n    background-color: #007899;\n    text-align: center;\n    color: white;\n    border-radius: 0 3px 3px 0;\n    cursor: pointer;\n    font-size: 12px;\n    vertical-align: top;\n  `\n\n  tempSection = styled.section`\n    width: auto:\n    min-height: 200px;\n    border: 1px solid white;\n    background-color: #CC6533;\n  `\n\n  InnerScreen = styled.div `\n    width: 100%;\n    height: 500px;\n    background-color: #3f4782\n    color: white;\n  `\n\n  InnerScreenText = styled.div`\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    text-align: center;\n    vertical-align: middle;\n  `\n  \n  changeHandler = event => {\n    this.setState({\n      cityName: event.target.value\n    })\n  }\n\n  submitHandler = event => {\n    event.preventDefault();\n    let {cityName} = this.state;\n    this.setState({\n      showLoading: true\n    })\n    fetch(`https://community-open-weather-map.p.rapidapi.com/forecast?units=imperial&q=${cityName}`, {\n      'method': 'GET',\n      'headers': {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"c40c4de0bemsh62e08668904743dp1f8821jsnd835a4ff28f9\"    \n      }\n    })\n    .then(response => {\n      console.log(\"success\")\n      response.json().then(data => {\n        this.weatherSort(data)\n      }) \n    })\n    .catch(err => {\n      console.log(\"fail\")\n      console.log(err);\n      this.setState( {\n        showLoading: false,\n        showError: true\n      })\n    })\n  }\n\n  weatherSort = data => {\n    if (data.cod !== \"200\") {\n      this.setState( {\n        showLoading: false,\n        showError: true\n      })\n      return;\n    } \n    let count = data.cnt\n    let temps = []\n    let tz = data.city.timezone\n    let timeTemp = {}\n    for (let i = 0; i < count; i++) {\n      timeTemp = {\n        time: new Date(1000 * (data.list[i].dt + tz)),\n        temp: Math.round(data.list[i].main.temp),\n        cond: data.list[i].weather[0].main.toLowerCase()\n      }\n      temps.push(timeTemp)\n    }\n    const result = temps.filter(tt => tt.time.getHours() > 9 && tt.time.getHours() < 19)\n    let highs = []; \n    let day = result[0].time.getDate();\n    for (let j = 0; j < 5; j++) {\n      let resultDay = result.filter(tt => tt.time.getDate() === (day + j))\n      let highestVal = Number.NEGATIVE_INFINITY;\n      let highestObj = resultDay[0]\n      let tmp = {}\n      for (let k=0; k<resultDay.length; k++) {\n        tmp = resultDay[k];\n        if (tmp.temp > highestVal) {\n          highestVal = tmp.temp;\n          highestObj = tmp;\n        }\n      }\n\n      highs.push(highestObj);\n    }\n    this.setState( {\n      temps: highs,\n      showLoading: false,\n      showTemps: true,\n      showError: false\n    })\n  }\n\n  render () {\n    return (\n      <this.weatherMainDiv>\n        <this.weatherHeader>\n          <this.weatherForm onSubmit={this.submitHandler}>\n            <this.weatherSearchBar type=\"text\"\n              name=\"city\"\n              value={this.state.cityName}\n              onChange={this.changeHandler}\n              placeholder=\"Please Enter a City Name\"\n            />\n            <this.weatherSearchBtn onClick={this.submitHandler}>Get Forecast</this.weatherSearchBtn>\n          </this.weatherForm>\n        </this.weatherHeader  >\n        <this.tempSection>\n          <this.InnerScreen>\n            <this.InnerScreenText>\n              {this.state.showLoading ? <Message messageText=\"Loading...\" /> : this.state.showError ? <Message messageText=\"Something went wrong. Please try again later.\" /> : this.state.showTemps ? <Temperatures temps={this.state.temps} city={this.state.cityName} /> : <Message messageText=\"Please enter a city to get your forecast.\" />}\n            </this.InnerScreenText>\n          </this.InnerScreen>\n        </this.tempSection>\n      </this.weatherMainDiv>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}